 <>
        {
            Object.keys(stockData).map(
                key=>(<>
                    <div>{key}   : {stockData[key]}</div>
                        </>
                )
            )
        }
        </>






useEffect(() => {
  const symbol = 'BTCUSDT';
  const interval = '1m';

  const updateChartData = (candles) => {
    setChartData(
      candles.map((candle) => [
        new Date(candle.openTime).toISOString().slice(0, 10),
        candle.open,
        candle.high,
        candle.low,
        candle.close,
      ])
    );
  };

  binance.futuresCandles(symbol, interval, (error, candles) => {
    if (error) {
      console.error(error);
      return;
    }

    updateChartData(candles);
  });

  const intervalId = setInterval(() => {
    binance.futuresCandles(symbol, interval, (error, candles) => {
      if (error) {
        console.error(error);
        return;
      }

      updateChartData(candles);
    });
  }, 10000);

  return () => {
    clearInterval(intervalId);
  };
}, []);




 useEffect(()=>{
        getStockData(market,interval)
        .then(data => setStockData(data))
        .catch(err=>{
            console.log(err)
        })
    },[stockData])




<LiveChart market='BTCUSDT' interval='1m'/>
      <h1 >hello</h1>





<InputGroup>
        <BuyButton />
        <Form.Control aria-label="With textarea" placeholder="Quantity" />
        <Form.Control aria-label="With textarea" placeholder="Amount" />
        <SellButton />
      </InputGroup>
      <div>
      <AssetCard/>
      </div>
      <div>
      <InvestedCard/>
      </div>